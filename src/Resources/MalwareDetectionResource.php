<?php

namespace MKWebDesign\FilamentWatchdog\Resources;

use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use MKWebDesign\FilamentWatchdog\Models\MalwareDetection;
use MKWebDesign\FilamentWatchdog\Resources\MalwareDetectionResource\Pages;
use MKWebDesign\FilamentWatchdog\Resources\MalwareDetectionResource\RelationManagers;

class MalwareDetectionResource extends Resource
{
    protected static ?string $model = MalwareDetection::class;
    protected static ?string $navigationIcon = 'heroicon-o-bug-ant';
    protected static ?string $navigationGroup = 'Security';
    protected static ?string $navigationLabel = 'Malware Detection';
    protected static ?int $navigationSort = 2;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('file_path')
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('threat_type')
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('signature_matched')
                    ->required()
                    ->maxLength(255),
                Forms\Components\Textarea::make('threat_details')
                    ->required()
                    ->columnSpanFull(),
                Forms\Components\Select::make('risk_level')
                    ->options([
                        'low' => 'Low',
                        'medium' => 'Medium',
                        'high' => 'High',
                        'critical' => 'Critical',
                    ])
                    ->required(),
                Forms\Components\Select::make('status')
                    ->options([
                        'detected' => 'Detected',
                        'quarantined' => 'Quarantined',
                        'cleaned' => 'Cleaned',
                        'false_positive' => 'False Positive',
                    ])
                    ->required(),
                Forms\Components\TextInput::make('quarantine_path')
                    ->maxLength(255),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('file_path')
                    ->searchable(),
                Tables\Columns\TextColumn::make('threat_type')
                    ->searchable(),
                Tables\Columns\BadgeColumn::make('risk_level')
                    ->colors([
                        'success' => 'low',
                        'info' => 'medium',
                        'warning' => 'high',
                        'danger' => 'critical',
                    ]),
                Tables\Columns\BadgeColumn::make('status')
                    ->colors([
                        'warning' => 'detected',
                        'danger' => 'quarantined',
                        'success' => 'cleaned',
                        'info' => 'false_positive',
                    ]),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('risk_level')
                    ->options([
                        'low' => 'Low',
                        'medium' => 'Medium',
                        'high' => 'High',
                        'critical' => 'Critical',
                    ]),
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'detected' => 'Detected',
                        'quarantined' => 'Quarantined',
                        'cleaned' => 'Cleaned',
                        'false_positive' => 'False Positive',
                    ]),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListMalwareDetections::route('/'),
            'create' => Pages\CreateMalwareDetection::route('/create'),
            'edit' => Pages\EditMalwareDetection::route('/{record}/edit'),
        ];
    }
}
