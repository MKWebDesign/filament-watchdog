<?php

namespace MKWebDesign\FilamentWatchdog\Services;

use Illuminate\Support\Facades\File;
use MKWebDesign\FilamentWatchdog\Models\MalwareDetection;

class MalwareDetectionService
{
    public function __construct(
        private AlertService $alertService,
        private FileIntegrityService $fileIntegrityService
    ) {}

public function scanFile(string $filePath): ?array
{
    if (!File::exists($filePath)) {
        return null;
    }

    $content = File::get($filePath);
    $signatures = config('filament-watchdog.malware_detection.signatures', []);
    $detections = [];

    foreach ($signatures as $threatType => $pattern) {
        if (preg_match($pattern, $content, $matches)) {
            $detection = [
                'file_path' => $filePath,
                'threat_type' => $threatType,
                'signature_matched' => $pattern,
                'threat_details' => [
                    'matched_text' => $matches[0] ?? '',
                    'line_number' => $this->getLineNumber($content, $matches[0] ?? ''),
                    'context' => $this->getContext($content, $matches[0] ?? ''),
                ],
                'risk_level' => $this->calculateRiskLevel($threatType),
                'status' => 'detected',
            ];

            $detections[] = $detection;
            $this->storeMalwareDetection($detection);
        }
    }

    if (!empty($detections)) {
        $this->handleMalwareDetection($filePath, $detections);
    }

    return $detections ?: null;
}

private function calculateRiskLevel(string $threatType): string
{
    $highRiskPatterns = ['php_system', 'php_exec', 'php_shell_exec', 'web_shell'];
    $mediumRiskPatterns = ['php_eval', 'file_get_contents', 'curl_exec'];

    if (in_array($threatType, $highRiskPatterns)) {
        return 'critical';
    } elseif (in_array($threatType, $mediumRiskPatterns)) {
        return 'high';
    } else {
        return 'medium';
    }
}

private function getLineNumber(string $content, string $match): int
{
    $lines = explode("\n", $content);
    foreach ($lines as $lineNumber => $line) {
        if (str_contains($line, $match)) {
            return $lineNumber + 1;
        }
    }
    return 0;
}

private function getContext(string $content, string $match): array
{
    $lines = explode("\n", $content);
    $contextLines = [];

    foreach ($lines as $lineNumber => $line) {
        if (str_contains($line, $match)) {
            $start = max(0, $lineNumber - 2);
            $end = min(count($lines) - 1, $lineNumber + 2);

            for ($i = $start; $i <= $end; $i++) {
                $contextLines[] = [
                    'line_number' => $i + 1,
                    'content' => $lines[$i],
                    'is_match' => $i === $lineNumber,
                ];
            }
            break;
        }
    }

    return $contextLines;
}

private function storeMalwareDetection(array $detection): void
{
    MalwareDetection::create($detection);
}

private function handleMalwareDetection(string $filePath, array $detections): void
{
    $highestRisk = $this->getHighestRiskLevel($detections);

    if (config('filament-watchdog.malware_detection.quarantine_enabled')) {
        $quarantinePath = $this->fileIntegrityService->quarantineFile($filePath);
        if ($quarantinePath) {
            foreach ($detections as $detection) {
                MalwareDetection::where('file_path', $filePath)
                    ->where('threat_type', $detection['threat_type'])
                    ->update([
                        'status' => 'quarantined',
                        'quarantine_path' => $quarantinePath,
                    ]);
            }
        }
    }

    $this->alertService->createAlert(
        'malware_detected',
        "Malware Detected: " . basename($filePath),
        "Multiple threats detected in {$filePath}. Highest risk level: {$highestRisk}",
        $highestRisk,
        ['file_path' => $filePath, 'detections' => $detections]
    );
}

private function getHighestRiskLevel(array $detections): string
{
    $levels = ['low' => 1, 'medium' => 2, 'high' => 3, 'critical' => 4];
    $highest = 'low';

    foreach ($detections as $detection) {
        if ($levels[$detection['risk_level']] > $levels[$highest]) {
            $highest = $detection['risk_level'];
        }
    }

    return $highest;
}

public function scanUploads(): array
{
    $detections = [];
    $uploadPaths = ['public/uploads', 'storage/app/uploads'];

    foreach ($uploadPaths as $path) {
        $fullPath = base_path($path);
        if (File::exists($fullPath)) {
            $files = File::allFiles($fullPath);
            foreach ($files as $file) {
                $result = $this->scanFile($file->getRealPath());
                if ($result) {
                    $detections = array_merge($detections, $result);
                }
            }
        }
    }

    return $detections;
}
}